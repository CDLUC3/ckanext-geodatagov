---
- hosts: dev
  user: root
  tasks:
    - name: install epel
      action: command creates=/etc/yum.repos.d/epel.repo rpm -Uvh http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm

    - name: install postgres repository
      action: command rpm -Uvh http://yum.postgresql.org/9.2/redhat/rhel-6-x86_64/pgdg-redhat92-9.2-7.noarch.rpm

    - name: make sure packages are installed
      action: yum pkg={{item}} state=installed
      with_items:
        - htop
        - atool
        - rubygems
        - python-virtualenv
        - python-setuptools
        - git
        - python-devel
        - ruby-devel
        - postgresql92-libs
        - postgresql92-devel
        - libxml2-devel
        - libxslt-devel
        - postgresql92
        - rpmdevtools
        - gcc
        - gcc-c++
        - make
        - bison
        - httpd
        - createrepo
        - mod_wsgi
        - java-openjdk
        - tomcat6
        - cronie
        - libselinux-python
        - wget
        - vim
        - python-psycopg2


#SOLR setup
    - name: prepare packages needed for solr
      action: yum pkg={{item}} state=installed
      with_items:
        - tomcat6
        - tomcat6-webapps
        - tomcat6-admin-webapps
        - wget
        - java-openjdk
        - libselinux-python

    - name: enabling tomcat service
      command: chkconfig tomcat6 on

    - name: starting tomcat service
      command: service tomcat6 start

    - name: Download Common Logging 1.1.3
      get_url: url="http://apache.cc.uoc.gr//commons/logging/binaries/commons-logging-1.1.3-bin.tar.gz" dest="~/"

    - name: Unpack common-logging
      shell: "cd ~/ && tar -zxvf commons-logging-1.1.3-bin.tar.gz && cd commons-logging-1.1.3 && cp commons-logging-*.jar /usr/share/tomcat6/lib/"

    - name: Download slf4j 1.7.5
      get_url: url="http://www.slf4j.org/dist/slf4j-1.7.5.tar.gz" dest="~/"

    - name: Unpack slf4j
      shell: "cd ~/ && tar -zxvf slf4j-1.7.5.tar.gz && cd slf4j-1.7.5 && cp slf4j-*.jar /usr/share/tomcat6/lib/"

    - name: Download solr 4.2.1
      get_url: url="http://archive.apache.org/dist/lucene/solr/4.2.1/solr-4.2.1.tgz" dest="~/"

    - name: Unpack solr
      shell: "cd ~/ && tar -zxvf solr-4.2.1.tgz && cd solr-4.2.1/dist && cp solr-4.2.1.war /var/lib/tomcat6/webapps/solr.war"

    - name: Setup solr home folder
      shell: "mkdir /home/solr && cp -R ~/solr-4.2.1/example/solr/* /home/solr && cd /home/solr/collection1/conf/ && rm schema.xml && wget https://raw.github.com/okfn/ckanext-geodatagov/master/solr/schema.xml && chown -R tomcat /home/solr"

    - name: restarting tomcat service
      command: service tomcat6 restart

    - name: copy needed solr config file
      action: copy src=usr/share/tomcat6/webapps/solr/WEB-INF/web.xml dest=/usr/share/tomcat6/webapps/solr/WEB-INF/web.xml

    - name: restarting tomcat service
      command: service tomcat6 restart

    - name: stop firewall
      command: service iptables stop

    - name: disable firewall service
      command: chkconfig iptables off

    - name: disable selinux
      command: /usr/sbin/setenforce 0


#POSTGRESQL setup
    - name: install postgres repository
      action: command rpm -Uvh http://yum.postgresql.org/9.2/redhat/rhel-6-x86_64/pgdg-redhat92-9.2-7.noarch.rpm

    - name: install epel
      action: command creates=/etc/yum.repos.d/epel.repo rpm -Uvh http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm

    - name: make sure postgresql packages are installed
      action: yum pkg={{item}} state=installed
      with_items:
        - postgresql92-libs
        - postgresql92-server
        - postgresql92
        - postgis2_92
        - hdf5
        - proj
        - libselinux-python
        - python-psycopg2

    - name: create postgresql cluster
      command: service postgresql-9.2 initdb

    - name: copy all needed postgresql files
      action: copy src={{item}} dest=/{{item}}
      with_items:
        - var/lib/pgsql/9.2/data/postgresql.conf
        - var/lib/pgsql/9.2/data/pg_hba.conf

    - name: starting postgresql service
      command: service postgresql-9.2 start

    - name: enabling postgresql service
      command: chkconfig postgresql-9.2 on

    - name: create geo.gov role
      action: postgresql_user user=geo.gov password=ckan role_attr_flags=SUPERUSER

    - name: create geo role
      action: postgresql_user user=geo password=ckan role_attr_flags=SUPERUSER

    - name: create ckan database
      action: postgresql_db name=ckan owner=geo.gov

    - name: install postgis script
      shell: "psql -d ckan -f /usr/pgsql-9.2/share/contrib/postgis-2.1/postgis.sql"
      sudo: yes
      sudo_user: postgres

    - name: install postgis script
      shell: "psql -d ckan -f /usr/pgsql-9.2/share/contrib/postgis-2.1/spatial_ref_sys.sql"
      sudo: yes
      sudo_user: postgres

    - name: install postgis script
      shell: "psql -d ckan -f /usr/pgsql-9.2/share/contrib/postgis-2.1/rtpostgis.sql"
      sudo: yes
      sudo_user: postgres

    - name: install postgis script
      shell: "psql -d ckan -f /usr/pgsql-9.2/share/contrib/postgis-2.1/topology.sql"
      sudo: yes
      sudo_user: postgres

# After PostgreSQL installation:
# $ gunzip -c /path/to/ckan2_tmp_dump.sql.gz | psql ckan
# $ psql ckan
# ckan=# ANALYZE; 


#CKAN setup
    - name: remove old code
      action: file path=/usr/lib/ckan/src state=absent

    - name: create link of pg_config for postgresql9.2
      action: command ln -s /usr/pgsql-9.2/bin/pg_config /usr/bin/pg_config

    - name: get ckan version
      action: git repo=https://github.com/GSA/ckan.git dest=/usr/lib/ckan/src/ckan version=release-datagov

    - name: get pip
      action: easy_install name=https://pypi.python.org/packages/source/p/pip/pip-1.3.1.tar.gz

    - name: install requirements and make virtualenv
      action: pip requirements=/usr/lib/ckan/src/ckan/pip-requirements.txt virtualenv=/usr/lib/ckan/ virtualenv_site_packages=yes

    - name: run setup.py develop for ckan
      action: command chdir=/usr/lib/ckan/src/ckan/ ../../bin/python setup.py develop

    - name: make sure pip is 1.3.1
      action: command chdir=/usr/lib/ckan/src/ckan/ ../../bin/easy_install https://pypi.python.org/packages/source/p/pip/pip-1.3.1.tar.gz

    - name: get geodatagov
      action: git repo=https://github.com/GSA/ckanext-geodatagov dest=/usr/lib/ckan/src/ckanext-geodatagov version=master

    - name: install requirements for geodatagov
      action: pip requirements=/usr/lib/ckan/src/ckanext-geodatagov/pip-requirements.txt virtualenv=/usr/lib/ckan/

    - name: run setup.py develop for geodatagov
      action: command chdir=/usr/lib/ckan/src/ckanext-geodatagov/ ../../bin/python setup.py develop

    - name: install requirements for harvest
      action: pip requirements=/usr/lib/ckan/src/ckanext-harvest/pip-requirements.txt virtualenv=/usr/lib/ckan/

    - name: install requirements for spatial
      action: pip requirements=/usr/lib/ckan/src/ckanext-spatial/pip-requirements.txt virtualenv=/usr/lib/ckan/

    - name: get datajson extension
      action: git repo=https://github.com/GSA/ckanext-datajson dest=/usr/lib/ckan/src/ckanext-datajson version=catalog

    - name: install requirements for datajson
      action: pip requirements=/usr/lib/ckan/src/ckanext-datajson/pip-requirements.txt virtualenv=/usr/lib/ckan/

    - name: run setup.py develop for datajson
      action: command chdir=/usr/lib/ckan/src/ckanext-datajson/ ../../bin/python setup.py develop

    - name: remove psycopg2
      action: pip name=psycopg2 virtualenv=/usr/lib/ckan/ state=absent

    - name: install supervisor
      action: pip name=supervisor virtualenv=/usr/lib/ckan/

    - name: remove old repo
      action: file path=/var/www/ckan-repo/master state=absent

    - name: create directories
      action: file path={{item}} state=directory
      with_items:
        - /etc/ckan
        - /var/www/ckan-repo/master

    - name: default apache removed
      action: file path=/etc/httpd/conf.d/welcome.conf state=absent

    - name: copy all needed files
      action: copy src={{item}} dest=/{{item}}
      with_items:
        - etc/ckan/who.ini
        - etc/ckan/apache.wsgi
        - etc/ckan/production.ini
        - etc/ckan/development.ini
        - etc/supervisord.conf
        - etc/httpd/conf.d/ckan.conf
        - etc/cron.d/ckan-harvest
        - etc/cron.daily/remove_old_sessions
        - etc/init/supervisor.conf
        - var/lib/tomcat6/webapps/fgdc2iso.war

    - name: copy executables
      action: copy src={{item}} dest=/{{item}} mode=744
      with_items:
        - usr/bin/ckan
        - tmp/after_web.sh
        - tmp/after_harvester.sh

    - name: create superviserctl symlink
      action: file src=/usr/lib/ckan/bin/supervisorctl dest=/usr/bin/supervisorctl state=link

    - name: restart apache
      action: service name=httpd state=restarted

    - name: packages for web part are installed
      action: yum pkg={{item}} state=installed
      with_items:
        - memcached
        - postgresql92
        - httpd
        - mod_wsgi
        - geos
        - cronie
        - python-psycopg2
        - xmlsec1
        - xmlsec1-openssl
        - swig
        - m2crypto

    - name: after web installation script
      action: command /tmp/after_web.sh

    - name: packages for harvester part
      action: yum pkg={{item}} state=installed
      with_items:
        - redis
        - postgresql92
        - geos
        - tomcat6
        - geos
        - cronie
        - python-psycopg2
        - xmlsec1
        - xmlsec1-openssl
        - swig
        - m2crypto
        - java-openjdk
        - libxslt
        - libxml2

    - name: point apache.wsgi to development.ini
      action: command sed -i 's/production.ini/development.ini/g' /etc/ckan/apache.wsgi

    - name: remove default who.ini
      action: file path=/etc/ckan/who.ini state=absent

    - name: download default ckan who.ini
      get_url: url="https://github.com/ckan/ckan/raw/366f1620da29ffaecf7e39d400b5223c8a56417e/ckan/config/who.ini" dest="/etc/ckan/who.ini"

    - name: Initialize ckan db
      action: command ckan db init

    - name: after harvester installation script
      action: command /tmp/after_web.sh

    - name: after harvester installation script
      action: command /tmp/after_harvester.sh

# After CKAN installation:
# $ ckan search-index rebuild

#pycsw setup
    - name: get pycsw version
      action: git repo=https://github.com/geopython/pycsw.git dest=/usr/lib/ckan/src/pycsw version=1.10.1

    - name: run setup build for pycsw
      action: command chdir=/usr/lib/ckan/src/pycsw/ ../../bin/python setup.py build

    - name: run setup install for pycsw
      action: command chdir=/usr/lib/ckan/src/pycsw/ ../../bin/python setup.py install

    - name: install pyproj
      action: pip name=pyproj virtualenv=/usr/lib/ckan/

    - name: install geolinks
      action: pip name=geolinks virtualenv=/usr/lib/ckan/

    - name: copy pycsw configuration files
      action: copy src={{item}} dest=/{{item}} mode=644
      with_items:
        - etc/ckan/pycsw-all.cfg
        - etc/ckan/pycsw-collection.cfg
        - etc/ckan/pycsw.wsgi
        - etc/cron.d/ckan-pycsw
        - usr/lib/ckan/bin/pycsw-db-admin.py
        # - etc/httpd/conf.d/ckan.conf

    - name: create pycsw database
      action: postgresql_db name=pycsw owner=geo.gov

    - name: install postgis for pycsw database
      command: psql -d pycsw -c "CREATE EXTENSION postgis;"
      sudo: yes
      sudo_user: postgres

    - name: create pycsw tables
      action: command chdir=/usr/lib/ckan/src/ckanext-spatial /usr/lib/ckan/bin/paster ckan-pycsw setup -p /etc/ckan/pycsw-all.cfg

    - name: restart apache
      action: service name=httpd state=restarted

